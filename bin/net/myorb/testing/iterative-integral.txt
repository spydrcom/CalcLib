

20	1048576.0	3.1415874415212497
30	2097152.0	3.141590047716009
61	4194304.0	3.141591350709777
101	8388608.0	3.1415920021698804
191	1.6777216E7	3.1415923278867375
371	3.3554432E7	3.141592490740715
720	6.7108864E7	3.141592572165824
1368	1.34217728E8	3.1415926128796507
2713	2.68435456E8	3.1415926332343536
5354	5.36870912E8	3.141592643412865
10596	1.073741824E9	3.141592648503826
21087	2.147483648E9	3.1415926510538514
42040	4.294967296E9	3.141592652341988
83860	8.589934592E9	3.141592653022883
167879	1.7179869184E10	3.1415926534645893
336239	3.4359738368E10	3.141592653*9848558*


	public static void main(String[] args)
	{
		double pieces = 2;
		double lo = 0, hi = 1, mid = (hi-lo) / 2;
		double halfMid = mid / 2;
		double sum = 0;

		long start = System.currentTimeMillis();
		
		for (int m = 1; m <= 7; m++)
		{
			for (int n = 1; n <= 5; n++)
			{
				double x = lo + halfMid;
				for (long i = 1; i <= pieces; i++)
				{
					sum = sum + f(x);
					x += mid;
				}

				pieces *= 2;
				halfMid /= 2;
				mid /= 2;

				if (pieces > 1000000)
				{
					double area = sum / pieces, pi = area * 4;
					long time = System.currentTimeMillis() - start;
					System.out.println (time + "\t" + pieces + "\t" + pi);
				}
			}
		}
	}
	public static double f(double x) { return Math.sqrt (1-x*x); }
	
